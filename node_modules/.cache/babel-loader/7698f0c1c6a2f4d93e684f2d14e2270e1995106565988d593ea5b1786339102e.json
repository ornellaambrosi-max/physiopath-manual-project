{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lorenzo\\\\Downloads\\\\physiopath-manual-project\\\\src\\\\pages\\\\Screening.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Patient, ScreeningAssessment } from \"@/entities/all\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { ArrowLeft, ArrowRight, Heart, AlertTriangle, CheckCircle2 } from \"lucide-react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { createPageUrl } from \"@/utils\";\nimport PersonalInfo from \"../components/screening/PersonalInfo\";\nimport SymptomAssessment from \"../components/screening/SymptomAssessment\";\nimport PainMapping from \"../components/screening/PainMapping\";\nimport FunctionalAssessment from \"../components/screening/FunctionalAssessment\";\nimport ValidatedScales from \"../components/screening/ValidatedScales\";\nimport RedFlagScreen from \"../components/screening/RedFlagScreen\";\nimport Results from \"../components/screening/Results\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Screening() {\n  _s();\n  var _steps, _steps2;\n  const navigate = useNavigate();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [screeningData, setScreeningData] = useState({\n    personalInfo: {},\n    symptoms: {},\n    painAreas: [],\n    functional: {},\n    scales: {},\n    redFlags: {}\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [results, setResults] = useState(null);\n  const steps = [{\n    id: 1,\n    title: \"Personal Information\",\n    component: PersonalInfo,\n    dataKey: 'personalInfo'\n  }, {\n    id: 2,\n    title: \"Symptom Assessment\",\n    component: SymptomAssessment,\n    dataKey: 'symptoms'\n  }, {\n    id: 3,\n    title: \"Pain Mapping\",\n    component: PainMapping,\n    dataKey: 'painAreas'\n  }, {\n    id: 4,\n    title: \"Your Story & Goals\",\n    component: FunctionalAssessment,\n    dataKey: 'functional'\n  }, {\n    id: 5,\n    title: \"Clinical Questionnaires\",\n    component: ValidatedScales,\n    dataKey: 'scales'\n  }, {\n    id: 6,\n    title: \"Safety Check\",\n    component: RedFlagScreen,\n    dataKey: 'redFlags'\n  }, {\n    id: 7,\n    title: \"Results\",\n    component: Results,\n    dataKey: null\n  }];\n  const totalSteps = steps.filter(s => s.id !== 7).length; // Don't count results step in progress\n  const progressPercentage = currentStep / totalSteps * 100;\n  const handleNext = () => {\n    if (currentStep < steps.length) {\n      // Allow going to results step\n      setCurrentStep(currentStep + 1);\n    }\n  };\n  const handlePrevious = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n  const updateScreeningData = (stepData, stepName) => {\n    setScreeningData(prev => ({\n      ...prev,\n      [stepName]: stepData\n    }));\n  };\n  const handleSubmitScreening = async () => {\n    setIsSubmitting(true);\n    try {\n      // Create or update patient record\n      const patientRecord = await Patient.create(screeningData.personalInfo);\n      const recommendedPathway = determineRecommendedPathway();\n      const riskLevel = determineRiskLevel();\n\n      // Create screening assessment\n      const assessmentData = {\n        patient_id: patientRecord.id,\n        problem_type: screeningData.symptoms.problem_type,\n        primary_complaint: screeningData.symptoms.primaryComplaint,\n        symptom_onset: screeningData.symptoms.symptom_onset,\n        symptom_duration: screeningData.symptoms.duration,\n        aggravating_factors: screeningData.symptoms.aggravating_factors,\n        relieving_factors: screeningData.symptoms.relieving_factors,\n        pain_areas: screeningData.painAreas,\n        patient_narrative: screeningData.functional.patient_narrative,\n        functional_goals: screeningData.functional.goals,\n        impact_on_life: screeningData.functional.impact_on_life,\n        support_system: screeningData.functional.support_system,\n        red_flags: screeningData.redFlags,\n        psfs_items: screeningData.scales.psfs_items,\n        // TODO: Calculate scores from responses (placeholder for now)\n        mini_fabq_score: 0,\n        mood_phq_score: 0,\n        recommended_pathway: recommendedPathway,\n        risk_level: riskLevel,\n        assessment_notes: `Screening completed. Pathway: ${recommendedPathway}. Risk: ${riskLevel}.`\n      };\n      const assessment = await ScreeningAssessment.create(assessmentData);\n\n      // Update patient with final care pathway\n      await Patient.update(patientRecord.id, {\n        care_pathway: recommendedPathway,\n        screening_completed: true\n      });\n      const generatedResults = {\n        recommendedPathway,\n        riskLevel,\n        summary: generateResultsSummary({\n          recommended_pathway: recommendedPathway\n        }),\n        recommendations: generateRecommendations({\n          red_flags: screeningData.redFlags\n        })\n      };\n      setResults(generatedResults);\n      setCurrentStep(7); // Move to results step\n    } catch (error) {\n      console.error(\"Error submitting screening:\", error);\n    }\n    setIsSubmitting(false);\n  };\n  const determineRecommendedPathway = () => {\n    const hasRedFlags = Object.values(screeningData.redFlags).some(v => v === true);\n    if (hasRedFlags) return 'urgent_medical_assessment';\n\n    // Simplified logic, would be more complex in reality\n    const painWorst = Math.max(...(screeningData.painAreas.map(area => area.pain_level_worst) || [0]));\n    if (painWorst >= 7) return 'personalized_care';\n    if (painWorst >= 4) return 'standardized_program';\n    return 'self_management';\n  };\n  const determineRiskLevel = () => {\n    const hasRedFlags = Object.values(screeningData.redFlags).some(v => v === true);\n    if (hasRedFlags) return 'urgent';\n    const painWorst = Math.max(...(screeningData.painAreas.map(area => area.pain_level_worst) || [0]));\n    if (painWorst >= 8) return 'high';\n    if (painWorst >= 5) return 'medium';\n    return 'low';\n  };\n  const generateResultsSummary = ({\n    recommended_pathway\n  }) => {\n    const summaries = {\n      urgent_medical_assessment: \"Your answers suggest that you should seek an urgent medical assessment from a doctor or hospital to rule out any serious conditions.\",\n      personalized_care: \"You would benefit most from a personalized physiotherapy program, tailored specifically to your unique symptoms, goals, and lifestyle.\",\n      standardized_program: \"A structured, evidence-based exercise program would be a great starting point to manage your condition and improve your function.\",\n      self_management: \"Your symptoms appear manageable with self-care. We recommend our educational resources and gentle exercise guides.\"\n    };\n    return summaries[recommended_pathway] || \"\";\n  };\n  const generateRecommendations = ({\n    red_flags\n  }) => {\n    const hasRedFlags = Object.values(red_flags).some(v => v === true);\n    if (hasRedFlags) {\n      return [\"Seek immediate consultation with a doctor or go to an emergency department.\", \"Do not begin an exercise program until cleared by a medical professional.\", \"Bring a summary of these results to your appointment.\"];\n    }\n    return [\"Begin with gentle movement and activity modification as tolerated.\", \"Focus on understanding your pain triggers and what brings relief.\", \"Gradually increase your activity levels within a comfortable range.\"];\n  };\n  const getCurrentComponent = () => {\n    const step = steps.find(s => s.id === currentStep);\n    if (!step) return null;\n    const Component = step.component;\n    return /*#__PURE__*/_jsxDEV(Component\n    // For Results step, pass the full screeningData object as context if needed.\n    // For other steps, pass the specific slice of data identified by dataKey.\n    , {\n      data: currentStep === 7 ? screeningData : step.dataKey ? screeningData[step.dataKey] : {},\n      onUpdate: stepData => updateScreeningData(stepData, step.dataKey),\n      onNext: handleNext,\n      onPrevious: handlePrevious,\n      onSubmit: currentStep === 6 ? handleSubmitScreening : null,\n      isSubmitting: isSubmitting,\n      results: currentStep === 7 ? results : null // Only pass results when on the results step\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-4xl mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center gap-4 mb-6\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outline\",\n          size: \"icon\",\n          onClick: () => navigate(createPageUrl(\"Dashboard\")),\n          className: \"rounded-xl\",\n          children: /*#__PURE__*/_jsxDEV(ArrowLeft, {\n            className: \"w-4 h-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text-3xl font-bold text-warm-gray-900\",\n            children: \"Health Assessment\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-warm-gray-600 mt-1\",\n            children: \"A comprehensive evaluation to personalize your care journey\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), currentStep < 7 && /*#__PURE__*/_jsxDEV(Card, {\n        className: \"border-sage-200 shadow-sm\",\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          className: \"p-6\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex items-center justify-between mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center gap-2\",\n              children: [/*#__PURE__*/_jsxDEV(Heart, {\n                className: \"w-5 h-5 text-sage-600\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"font-medium text-warm-gray-900\",\n                children: [\"Step \", currentStep, \" of \", totalSteps]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"text-sm text-warm-gray-600\",\n              children: [Math.round(progressPercentage), \"% complete\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Progress, {\n            value: progressPercentage,\n            className: \"h-2 mb-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text-sm font-medium text-warm-gray-700\",\n            children: (_steps = steps[currentStep - 1]) === null || _steps === void 0 ? void 0 : _steps.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-8\",\n      children: getCurrentComponent()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), currentStep < 7 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between items-center bg-white/80 backdrop-blur-sm sticky bottom-0 py-4 px-6 -mx-6 border-t border-sage-200\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outline\",\n        onClick: handlePrevious,\n        disabled: currentStep === 1,\n        className: \"rounded-xl px-6 py-2\",\n        children: [/*#__PURE__*/_jsxDEV(ArrowLeft, {\n          className: \"w-4 h-4 mr-2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this), \"Previous\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-xs text-warm-gray-600\",\n          children: [\"Step \", currentStep, \" of \", totalSteps]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-medium\",\n          children: (_steps2 = steps[currentStep - 1]) === null || _steps2 === void 0 ? void 0 : _steps2.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: currentStep === 6 ? handleSubmitScreening : handleNext,\n        disabled: isSubmitting,\n        className: \"bg-sage-600 hover:bg-sage-700 rounded-xl px-6 py-2\",\n        children: isSubmitting ? \"Processing...\" : currentStep === 6 ? \"Complete Assessment\" : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [\"Next\", /*#__PURE__*/_jsxDEV(ArrowRight, {\n            className: \"w-4 h-4 ml-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n}\n_s(Screening, \"OZx4S0+PZosmqVSN+2eRypriv4I=\", false, function () {\n  return [useNavigate];\n});\n_c = Screening;\nvar _c;\n$RefreshReg$(_c, \"Screening\");","map":{"version":3,"names":["React","useState","Patient","ScreeningAssessment","Card","CardContent","CardHeader","CardTitle","Button","Progress","ArrowLeft","ArrowRight","Heart","AlertTriangle","CheckCircle2","useNavigate","createPageUrl","PersonalInfo","SymptomAssessment","PainMapping","FunctionalAssessment","ValidatedScales","RedFlagScreen","Results","jsxDEV","_jsxDEV","Fragment","_Fragment","Screening","_s","_steps","_steps2","navigate","currentStep","setCurrentStep","screeningData","setScreeningData","personalInfo","symptoms","painAreas","functional","scales","redFlags","isSubmitting","setIsSubmitting","results","setResults","steps","id","title","component","dataKey","totalSteps","filter","s","length","progressPercentage","handleNext","handlePrevious","updateScreeningData","stepData","stepName","prev","handleSubmitScreening","patientRecord","create","recommendedPathway","determineRecommendedPathway","riskLevel","determineRiskLevel","assessmentData","patient_id","problem_type","primary_complaint","primaryComplaint","symptom_onset","symptom_duration","duration","aggravating_factors","relieving_factors","pain_areas","patient_narrative","functional_goals","goals","impact_on_life","support_system","red_flags","psfs_items","mini_fabq_score","mood_phq_score","recommended_pathway","risk_level","assessment_notes","assessment","update","care_pathway","screening_completed","generatedResults","summary","generateResultsSummary","recommendations","generateRecommendations","error","console","hasRedFlags","Object","values","some","v","painWorst","Math","max","map","area","pain_level_worst","summaries","urgent_medical_assessment","personalized_care","standardized_program","self_management","getCurrentComponent","step","find","Component","data","onUpdate","onNext","onPrevious","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","className","children","variant","size","onClick","round","value","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Lorenzo/Downloads/physiopath-manual-project/src/pages/Screening.jsx"],"sourcesContent":["\r\nimport React, { useState } from \"react\";\r\nimport { Patient, ScreeningAssessment } from \"@/entities/all\";\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Progress } from \"@/components/ui/progress\";\r\nimport { ArrowLeft, ArrowRight, Heart, AlertTriangle, CheckCircle2 } from \"lucide-react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { createPageUrl } from \"@/utils\";\r\n\r\nimport PersonalInfo from \"../components/screening/PersonalInfo\";\r\nimport SymptomAssessment from \"../components/screening/SymptomAssessment\";\r\nimport PainMapping from \"../components/screening/PainMapping\";\r\nimport FunctionalAssessment from \"../components/screening/FunctionalAssessment\";\r\nimport ValidatedScales from \"../components/screening/ValidatedScales\";\r\nimport RedFlagScreen from \"../components/screening/RedFlagScreen\";\r\nimport Results from \"../components/screening/Results\";\r\n\r\nexport default function Screening() {\r\n  const navigate = useNavigate();\r\n  const [currentStep, setCurrentStep] = useState(1);\r\n  const [screeningData, setScreeningData] = useState({\r\n    personalInfo: {},\r\n    symptoms: {},\r\n    painAreas: [],\r\n    functional: {},\r\n    scales: {},\r\n    redFlags: {}\r\n  });\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [results, setResults] = useState(null);\r\n\r\n  const steps = [\r\n    { id: 1, title: \"Personal Information\", component: PersonalInfo, dataKey: 'personalInfo' },\r\n    { id: 2, title: \"Symptom Assessment\", component: SymptomAssessment, dataKey: 'symptoms' },\r\n    { id: 3, title: \"Pain Mapping\", component: PainMapping, dataKey: 'painAreas' },\r\n    { id: 4, title: \"Your Story & Goals\", component: FunctionalAssessment, dataKey: 'functional' },\r\n    { id: 5, title: \"Clinical Questionnaires\", component: ValidatedScales, dataKey: 'scales' },\r\n    { id: 6, title: \"Safety Check\", component: RedFlagScreen, dataKey: 'redFlags' },\r\n    { id: 7, title: \"Results\", component: Results, dataKey: null }\r\n  ];\r\n\r\n  const totalSteps = steps.filter(s => s.id !== 7).length; // Don't count results step in progress\r\n  const progressPercentage = (currentStep / totalSteps) * 100;\r\n\r\n  const handleNext = () => {\r\n    if (currentStep < steps.length) { // Allow going to results step\r\n      setCurrentStep(currentStep + 1);\r\n    }\r\n  };\r\n\r\n  const handlePrevious = () => {\r\n    if (currentStep > 1) {\r\n      setCurrentStep(currentStep - 1);\r\n    }\r\n  };\r\n\r\n  const updateScreeningData = (stepData, stepName) => {\r\n    setScreeningData(prev => ({\r\n      ...prev,\r\n      [stepName]: stepData\r\n    }));\r\n  };\r\n\r\n  const handleSubmitScreening = async () => {\r\n    setIsSubmitting(true);\r\n    try {\r\n      // Create or update patient record\r\n      const patientRecord = await Patient.create(screeningData.personalInfo);\r\n\r\n      const recommendedPathway = determineRecommendedPathway();\r\n      const riskLevel = determineRiskLevel();\r\n\r\n      // Create screening assessment\r\n      const assessmentData = {\r\n        patient_id: patientRecord.id,\r\n        problem_type: screeningData.symptoms.problem_type,\r\n        primary_complaint: screeningData.symptoms.primaryComplaint,\r\n        symptom_onset: screeningData.symptoms.symptom_onset,\r\n        symptom_duration: screeningData.symptoms.duration,\r\n        aggravating_factors: screeningData.symptoms.aggravating_factors,\r\n        relieving_factors: screeningData.symptoms.relieving_factors,\r\n        pain_areas: screeningData.painAreas,\r\n        patient_narrative: screeningData.functional.patient_narrative,\r\n        functional_goals: screeningData.functional.goals,\r\n        impact_on_life: screeningData.functional.impact_on_life,\r\n        support_system: screeningData.functional.support_system,\r\n        red_flags: screeningData.redFlags,\r\n        psfs_items: screeningData.scales.psfs_items,\r\n        // TODO: Calculate scores from responses (placeholder for now)\r\n        mini_fabq_score: 0, \r\n        mood_phq_score: 0,\r\n        recommended_pathway: recommendedPathway,\r\n        risk_level: riskLevel,\r\n        assessment_notes: `Screening completed. Pathway: ${recommendedPathway}. Risk: ${riskLevel}.`\r\n      };\r\n\r\n      const assessment = await ScreeningAssessment.create(assessmentData);\r\n\r\n      // Update patient with final care pathway\r\n      await Patient.update(patientRecord.id, {\r\n        care_pathway: recommendedPathway,\r\n        screening_completed: true,\r\n      });\r\n      \r\n      const generatedResults = {\r\n        recommendedPathway,\r\n        riskLevel,\r\n        summary: generateResultsSummary({ recommended_pathway: recommendedPathway }),\r\n        recommendations: generateRecommendations({ red_flags: screeningData.redFlags })\r\n      };\r\n\r\n      setResults(generatedResults);\r\n      setCurrentStep(7); // Move to results step\r\n\r\n    } catch (error) {\r\n      console.error(\"Error submitting screening:\", error);\r\n    }\r\n    setIsSubmitting(false);\r\n  };\r\n\r\n  const determineRecommendedPathway = () => {\r\n    const hasRedFlags = Object.values(screeningData.redFlags).some(v => v === true);\r\n    if (hasRedFlags) return 'urgent_medical_assessment';\r\n    \r\n    // Simplified logic, would be more complex in reality\r\n    const painWorst = Math.max(...(screeningData.painAreas.map(area => area.pain_level_worst) || [0]));\r\n    if (painWorst >= 7) return 'personalized_care';\r\n    if (painWorst >= 4) return 'standardized_program';\r\n\r\n    return 'self_management';\r\n  };\r\n\r\n  const determineRiskLevel = () => {\r\n    const hasRedFlags = Object.values(screeningData.redFlags).some(v => v === true);\r\n    if (hasRedFlags) return 'urgent';\r\n    \r\n    const painWorst = Math.max(...(screeningData.painAreas.map(area => area.pain_level_worst) || [0]));\r\n    if (painWorst >= 8) return 'high';\r\n    if (painWorst >= 5) return 'medium';\r\n\r\n    return 'low';\r\n  };\r\n  \r\n  const generateResultsSummary = ({ recommended_pathway }) => {\r\n    const summaries = {\r\n      urgent_medical_assessment: \"Your answers suggest that you should seek an urgent medical assessment from a doctor or hospital to rule out any serious conditions.\",\r\n      personalized_care: \"You would benefit most from a personalized physiotherapy program, tailored specifically to your unique symptoms, goals, and lifestyle.\",\r\n      standardized_program: \"A structured, evidence-based exercise program would be a great starting point to manage your condition and improve your function.\",\r\n      self_management: \"Your symptoms appear manageable with self-care. We recommend our educational resources and gentle exercise guides.\"\r\n    };\r\n    return summaries[recommended_pathway] || \"\";\r\n  };\r\n  \r\n  const generateRecommendations = ({ red_flags }) => {\r\n    const hasRedFlags = Object.values(red_flags).some(v => v === true);\r\n    if (hasRedFlags) {\r\n        return [\"Seek immediate consultation with a doctor or go to an emergency department.\", \"Do not begin an exercise program until cleared by a medical professional.\", \"Bring a summary of these results to your appointment.\"];\r\n    }\r\n    return [\"Begin with gentle movement and activity modification as tolerated.\", \"Focus on understanding your pain triggers and what brings relief.\", \"Gradually increase your activity levels within a comfortable range.\"];\r\n  };\r\n\r\n  const getCurrentComponent = () => {\r\n    const step = steps.find(s => s.id === currentStep);\r\n    if (!step) return null;\r\n\r\n    const Component = step.component;\r\n    return (\r\n      <Component\r\n        // For Results step, pass the full screeningData object as context if needed.\r\n        // For other steps, pass the specific slice of data identified by dataKey.\r\n        data={currentStep === 7 ? screeningData : (step.dataKey ? screeningData[step.dataKey] : {})}\r\n        onUpdate={(stepData) => updateScreeningData(stepData, step.dataKey)}\r\n        onNext={handleNext}\r\n        onPrevious={handlePrevious}\r\n        onSubmit={currentStep === 6 ? handleSubmitScreening : null}\r\n        isSubmitting={isSubmitting}\r\n        results={currentStep === 7 ? results : null} // Only pass results when on the results step\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto\">\r\n      <div className=\"mb-8\">\r\n        <div className=\"flex items-center gap-4 mb-6\">\r\n          <Button \r\n            variant=\"outline\" \r\n            size=\"icon\"\r\n            onClick={() => navigate(createPageUrl(\"Dashboard\"))}\r\n            className=\"rounded-xl\"\r\n          >\r\n            <ArrowLeft className=\"w-4 h-4\" />\r\n          </Button>\r\n          <div>\r\n            <h1 className=\"text-3xl font-bold text-warm-gray-900\">\r\n              Health Assessment\r\n            </h1>\r\n            <p className=\"text-warm-gray-600 mt-1\">\r\n              A comprehensive evaluation to personalize your care journey\r\n            </p>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Progress Bar */}\r\n        {currentStep < 7 &&\r\n          <Card className=\"border-sage-200 shadow-sm\">\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Heart className=\"w-5 h-5 text-sage-600\" />\r\n                  <span className=\"font-medium text-warm-gray-900\">\r\n                    Step {currentStep} of {totalSteps}\r\n                  </span>\r\n                </div>\r\n                <span className=\"text-sm text-warm-gray-600\">\r\n                  {Math.round(progressPercentage)}% complete\r\n                </span>\r\n              </div>\r\n              <Progress value={progressPercentage} className=\"h-2 mb-4\" />\r\n              <p className=\"text-sm font-medium text-warm-gray-700\">\r\n                {steps[currentStep - 1]?.title}\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n        }\r\n      </div>\r\n\r\n      {/* Current Step Component */}\r\n      <div className=\"mb-8\">\r\n        {getCurrentComponent()}\r\n      </div>\r\n\r\n      {/* Navigation */}\r\n      {currentStep < 7 && (\r\n        <div className=\"flex justify-between items-center bg-white/80 backdrop-blur-sm sticky bottom-0 py-4 px-6 -mx-6 border-t border-sage-200\">\r\n          <Button\r\n            variant=\"outline\"\r\n            onClick={handlePrevious}\r\n            disabled={currentStep === 1}\r\n            className=\"rounded-xl px-6 py-2\"\r\n          >\r\n            <ArrowLeft className=\"w-4 h-4 mr-2\" />\r\n            Previous\r\n          </Button>\r\n          \r\n          <div className=\"text-center\">\r\n            <p className=\"text-xs text-warm-gray-600\">Step {currentStep} of {totalSteps}</p>\r\n            <p className=\"font-medium\">{steps[currentStep - 1]?.title}</p>\r\n          </div>\r\n\r\n          <Button\r\n            onClick={currentStep === 6 ? handleSubmitScreening : handleNext}\r\n            disabled={isSubmitting}\r\n            className=\"bg-sage-600 hover:bg-sage-700 rounded-xl px-6 py-2\"\r\n          >\r\n            {isSubmitting ? (\r\n              \"Processing...\"\r\n            ) : currentStep === 6 ? (\r\n              \"Complete Assessment\"\r\n            ) : (\r\n              <>\r\n                Next\r\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\r\n              </>\r\n            )}\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,OAAO,EAAEC,mBAAmB,QAAQ,gBAAgB;AAC7D,SAASC,IAAI,EAAEC,WAAW,EAAEC,UAAU,EAAEC,SAAS,QAAQ,sBAAsB;AAC/E,SAASC,MAAM,QAAQ,wBAAwB;AAC/C,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,SAAS,EAAEC,UAAU,EAAEC,KAAK,EAAEC,aAAa,EAAEC,YAAY,QAAQ,cAAc;AACxF,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,aAAa,QAAQ,SAAS;AAEvC,OAAOC,YAAY,MAAM,sCAAsC;AAC/D,OAAOC,iBAAiB,MAAM,2CAA2C;AACzE,OAAOC,WAAW,MAAM,qCAAqC;AAC7D,OAAOC,oBAAoB,MAAM,8CAA8C;AAC/E,OAAOC,eAAe,MAAM,yCAAyC;AACrE,OAAOC,aAAa,MAAM,uCAAuC;AACjE,OAAOC,OAAO,MAAM,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtD,eAAe,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAAA,IAAAC,MAAA,EAAAC,OAAA;EAClC,MAAMC,QAAQ,GAAGjB,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGjC,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACkC,aAAa,EAAEC,gBAAgB,CAAC,GAAGnC,QAAQ,CAAC;IACjDoC,YAAY,EAAE,CAAC,CAAC;IAChBC,QAAQ,EAAE,CAAC,CAAC;IACZC,SAAS,EAAE,EAAE;IACbC,UAAU,EAAE,CAAC,CAAC;IACdC,MAAM,EAAE,CAAC,CAAC;IACVC,QAAQ,EAAE,CAAC;EACb,CAAC,CAAC;EACF,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAG3C,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAAC4C,OAAO,EAAEC,UAAU,CAAC,GAAG7C,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAM8C,KAAK,GAAG,CACZ;IAAEC,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,sBAAsB;IAAEC,SAAS,EAAEjC,YAAY;IAAEkC,OAAO,EAAE;EAAe,CAAC,EAC1F;IAAEH,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,oBAAoB;IAAEC,SAAS,EAAEhC,iBAAiB;IAAEiC,OAAO,EAAE;EAAW,CAAC,EACzF;IAAEH,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,cAAc;IAAEC,SAAS,EAAE/B,WAAW;IAAEgC,OAAO,EAAE;EAAY,CAAC,EAC9E;IAAEH,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,oBAAoB;IAAEC,SAAS,EAAE9B,oBAAoB;IAAE+B,OAAO,EAAE;EAAa,CAAC,EAC9F;IAAEH,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,yBAAyB;IAAEC,SAAS,EAAE7B,eAAe;IAAE8B,OAAO,EAAE;EAAS,CAAC,EAC1F;IAAEH,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,cAAc;IAAEC,SAAS,EAAE5B,aAAa;IAAE6B,OAAO,EAAE;EAAW,CAAC,EAC/E;IAAEH,EAAE,EAAE,CAAC;IAAEC,KAAK,EAAE,SAAS;IAAEC,SAAS,EAAE3B,OAAO;IAAE4B,OAAO,EAAE;EAAK,CAAC,CAC/D;EAED,MAAMC,UAAU,GAAGL,KAAK,CAACM,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACN,EAAE,KAAK,CAAC,CAAC,CAACO,MAAM,CAAC,CAAC;EACzD,MAAMC,kBAAkB,GAAIvB,WAAW,GAAGmB,UAAU,GAAI,GAAG;EAE3D,MAAMK,UAAU,GAAGA,CAAA,KAAM;IACvB,IAAIxB,WAAW,GAAGc,KAAK,CAACQ,MAAM,EAAE;MAAE;MAChCrB,cAAc,CAACD,WAAW,GAAG,CAAC,CAAC;IACjC;EACF,CAAC;EAED,MAAMyB,cAAc,GAAGA,CAAA,KAAM;IAC3B,IAAIzB,WAAW,GAAG,CAAC,EAAE;MACnBC,cAAc,CAACD,WAAW,GAAG,CAAC,CAAC;IACjC;EACF,CAAC;EAED,MAAM0B,mBAAmB,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IAClDzB,gBAAgB,CAAC0B,IAAI,KAAK;MACxB,GAAGA,IAAI;MACP,CAACD,QAAQ,GAAGD;IACd,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMG,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxCnB,eAAe,CAAC,IAAI,CAAC;IACrB,IAAI;MACF;MACA,MAAMoB,aAAa,GAAG,MAAM9D,OAAO,CAAC+D,MAAM,CAAC9B,aAAa,CAACE,YAAY,CAAC;MAEtE,MAAM6B,kBAAkB,GAAGC,2BAA2B,CAAC,CAAC;MACxD,MAAMC,SAAS,GAAGC,kBAAkB,CAAC,CAAC;;MAEtC;MACA,MAAMC,cAAc,GAAG;QACrBC,UAAU,EAAEP,aAAa,CAAChB,EAAE;QAC5BwB,YAAY,EAAErC,aAAa,CAACG,QAAQ,CAACkC,YAAY;QACjDC,iBAAiB,EAAEtC,aAAa,CAACG,QAAQ,CAACoC,gBAAgB;QAC1DC,aAAa,EAAExC,aAAa,CAACG,QAAQ,CAACqC,aAAa;QACnDC,gBAAgB,EAAEzC,aAAa,CAACG,QAAQ,CAACuC,QAAQ;QACjDC,mBAAmB,EAAE3C,aAAa,CAACG,QAAQ,CAACwC,mBAAmB;QAC/DC,iBAAiB,EAAE5C,aAAa,CAACG,QAAQ,CAACyC,iBAAiB;QAC3DC,UAAU,EAAE7C,aAAa,CAACI,SAAS;QACnC0C,iBAAiB,EAAE9C,aAAa,CAACK,UAAU,CAACyC,iBAAiB;QAC7DC,gBAAgB,EAAE/C,aAAa,CAACK,UAAU,CAAC2C,KAAK;QAChDC,cAAc,EAAEjD,aAAa,CAACK,UAAU,CAAC4C,cAAc;QACvDC,cAAc,EAAElD,aAAa,CAACK,UAAU,CAAC6C,cAAc;QACvDC,SAAS,EAAEnD,aAAa,CAACO,QAAQ;QACjC6C,UAAU,EAAEpD,aAAa,CAACM,MAAM,CAAC8C,UAAU;QAC3C;QACAC,eAAe,EAAE,CAAC;QAClBC,cAAc,EAAE,CAAC;QACjBC,mBAAmB,EAAExB,kBAAkB;QACvCyB,UAAU,EAAEvB,SAAS;QACrBwB,gBAAgB,EAAE,iCAAiC1B,kBAAkB,WAAWE,SAAS;MAC3F,CAAC;MAED,MAAMyB,UAAU,GAAG,MAAM1F,mBAAmB,CAAC8D,MAAM,CAACK,cAAc,CAAC;;MAEnE;MACA,MAAMpE,OAAO,CAAC4F,MAAM,CAAC9B,aAAa,CAAChB,EAAE,EAAE;QACrC+C,YAAY,EAAE7B,kBAAkB;QAChC8B,mBAAmB,EAAE;MACvB,CAAC,CAAC;MAEF,MAAMC,gBAAgB,GAAG;QACvB/B,kBAAkB;QAClBE,SAAS;QACT8B,OAAO,EAAEC,sBAAsB,CAAC;UAAET,mBAAmB,EAAExB;QAAmB,CAAC,CAAC;QAC5EkC,eAAe,EAAEC,uBAAuB,CAAC;UAAEf,SAAS,EAAEnD,aAAa,CAACO;QAAS,CAAC;MAChF,CAAC;MAEDI,UAAU,CAACmD,gBAAgB,CAAC;MAC5B/D,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;IAErB,CAAC,CAAC,OAAOoE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;IACA1D,eAAe,CAAC,KAAK,CAAC;EACxB,CAAC;EAED,MAAMuB,2BAA2B,GAAGA,CAAA,KAAM;IACxC,MAAMqC,WAAW,GAAGC,MAAM,CAACC,MAAM,CAACvE,aAAa,CAACO,QAAQ,CAAC,CAACiE,IAAI,CAACC,CAAC,IAAIA,CAAC,KAAK,IAAI,CAAC;IAC/E,IAAIJ,WAAW,EAAE,OAAO,2BAA2B;;IAEnD;IACA,MAAMK,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI5E,aAAa,CAACI,SAAS,CAACyE,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAClG,IAAIL,SAAS,IAAI,CAAC,EAAE,OAAO,mBAAmB;IAC9C,IAAIA,SAAS,IAAI,CAAC,EAAE,OAAO,sBAAsB;IAEjD,OAAO,iBAAiB;EAC1B,CAAC;EAED,MAAMxC,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,MAAMmC,WAAW,GAAGC,MAAM,CAACC,MAAM,CAACvE,aAAa,CAACO,QAAQ,CAAC,CAACiE,IAAI,CAACC,CAAC,IAAIA,CAAC,KAAK,IAAI,CAAC;IAC/E,IAAIJ,WAAW,EAAE,OAAO,QAAQ;IAEhC,MAAMK,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI5E,aAAa,CAACI,SAAS,CAACyE,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAClG,IAAIL,SAAS,IAAI,CAAC,EAAE,OAAO,MAAM;IACjC,IAAIA,SAAS,IAAI,CAAC,EAAE,OAAO,QAAQ;IAEnC,OAAO,KAAK;EACd,CAAC;EAED,MAAMV,sBAAsB,GAAGA,CAAC;IAAET;EAAoB,CAAC,KAAK;IAC1D,MAAMyB,SAAS,GAAG;MAChBC,yBAAyB,EAAE,sIAAsI;MACjKC,iBAAiB,EAAE,wIAAwI;MAC3JC,oBAAoB,EAAE,mIAAmI;MACzJC,eAAe,EAAE;IACnB,CAAC;IACD,OAAOJ,SAAS,CAACzB,mBAAmB,CAAC,IAAI,EAAE;EAC7C,CAAC;EAED,MAAMW,uBAAuB,GAAGA,CAAC;IAAEf;EAAU,CAAC,KAAK;IACjD,MAAMkB,WAAW,GAAGC,MAAM,CAACC,MAAM,CAACpB,SAAS,CAAC,CAACqB,IAAI,CAACC,CAAC,IAAIA,CAAC,KAAK,IAAI,CAAC;IAClE,IAAIJ,WAAW,EAAE;MACb,OAAO,CAAC,6EAA6E,EAAE,2EAA2E,EAAE,uDAAuD,CAAC;IAChO;IACA,OAAO,CAAC,oEAAoE,EAAE,mEAAmE,EAAE,qEAAqE,CAAC;EAC3N,CAAC;EAED,MAAMgB,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAMC,IAAI,GAAG1E,KAAK,CAAC2E,IAAI,CAACpE,CAAC,IAAIA,CAAC,CAACN,EAAE,KAAKf,WAAW,CAAC;IAClD,IAAI,CAACwF,IAAI,EAAE,OAAO,IAAI;IAEtB,MAAME,SAAS,GAAGF,IAAI,CAACvE,SAAS;IAChC,oBACEzB,OAAA,CAACkG;IACC;IACA;IAAA;MACAC,IAAI,EAAE3F,WAAW,KAAK,CAAC,GAAGE,aAAa,GAAIsF,IAAI,CAACtE,OAAO,GAAGhB,aAAa,CAACsF,IAAI,CAACtE,OAAO,CAAC,GAAG,CAAC,CAAG;MAC5F0E,QAAQ,EAAGjE,QAAQ,IAAKD,mBAAmB,CAACC,QAAQ,EAAE6D,IAAI,CAACtE,OAAO,CAAE;MACpE2E,MAAM,EAAErE,UAAW;MACnBsE,UAAU,EAAErE,cAAe;MAC3BsE,QAAQ,EAAE/F,WAAW,KAAK,CAAC,GAAG8B,qBAAqB,GAAG,IAAK;MAC3DpB,YAAY,EAAEA,YAAa;MAC3BE,OAAO,EAAEZ,WAAW,KAAK,CAAC,GAAGY,OAAO,GAAG,IAAK,CAAC;IAAA;MAAAoF,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC;EAEN,CAAC;EAED,oBACE3G,OAAA;IAAK4G,SAAS,EAAC,mBAAmB;IAAAC,QAAA,gBAChC7G,OAAA;MAAK4G,SAAS,EAAC,MAAM;MAAAC,QAAA,gBACnB7G,OAAA;QAAK4G,SAAS,EAAC,8BAA8B;QAAAC,QAAA,gBAC3C7G,OAAA,CAACjB,MAAM;UACL+H,OAAO,EAAC,SAAS;UACjBC,IAAI,EAAC,MAAM;UACXC,OAAO,EAAEA,CAAA,KAAMzG,QAAQ,CAAChB,aAAa,CAAC,WAAW,CAAC,CAAE;UACpDqH,SAAS,EAAC,YAAY;UAAAC,QAAA,eAEtB7G,OAAA,CAACf,SAAS;YAAC2H,SAAS,EAAC;UAAS;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3B,CAAC,eACT3G,OAAA;UAAA6G,QAAA,gBACE7G,OAAA;YAAI4G,SAAS,EAAC,uCAAuC;YAAAC,QAAA,EAAC;UAEtD;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACL3G,OAAA;YAAG4G,SAAS,EAAC,yBAAyB;YAAAC,QAAA,EAAC;UAEvC;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,EAGLnG,WAAW,GAAG,CAAC,iBACdR,OAAA,CAACrB,IAAI;QAACiI,SAAS,EAAC,2BAA2B;QAAAC,QAAA,eACzC7G,OAAA,CAACpB,WAAW;UAACgI,SAAS,EAAC,KAAK;UAAAC,QAAA,gBAC1B7G,OAAA;YAAK4G,SAAS,EAAC,wCAAwC;YAAAC,QAAA,gBACrD7G,OAAA;cAAK4G,SAAS,EAAC,yBAAyB;cAAAC,QAAA,gBACtC7G,OAAA,CAACb,KAAK;gBAACyH,SAAS,EAAC;cAAuB;gBAAAJ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC,eAC3C3G,OAAA;gBAAM4G,SAAS,EAAC,gCAAgC;gBAAAC,QAAA,GAAC,OAC1C,EAACrG,WAAW,EAAC,MAAI,EAACmB,UAAU;cAAA;gBAAA6E,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC7B,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACJ,CAAC,eACN3G,OAAA;cAAM4G,SAAS,EAAC,4BAA4B;cAAAC,QAAA,GACzCxB,IAAI,CAAC4B,KAAK,CAAClF,kBAAkB,CAAC,EAAC,YAClC;YAAA;cAAAyE,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC,eACN3G,OAAA,CAAChB,QAAQ;YAACkI,KAAK,EAAEnF,kBAAmB;YAAC6E,SAAS,EAAC;UAAU;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC5D3G,OAAA;YAAG4G,SAAS,EAAC,wCAAwC;YAAAC,QAAA,GAAAxG,MAAA,GAClDiB,KAAK,CAACd,WAAW,GAAG,CAAC,CAAC,cAAAH,MAAA,uBAAtBA,MAAA,CAAwBmB;UAAK;YAAAgF,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC7B,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACO;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEN,CAAC,eAGN3G,OAAA;MAAK4G,SAAS,EAAC,MAAM;MAAAC,QAAA,EAClBd,mBAAmB,CAAC;IAAC;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CAAC,EAGLnG,WAAW,GAAG,CAAC,iBACdR,OAAA;MAAK4G,SAAS,EAAC,yHAAyH;MAAAC,QAAA,gBACtI7G,OAAA,CAACjB,MAAM;QACL+H,OAAO,EAAC,SAAS;QACjBE,OAAO,EAAE/E,cAAe;QACxBkF,QAAQ,EAAE3G,WAAW,KAAK,CAAE;QAC5BoG,SAAS,EAAC,sBAAsB;QAAAC,QAAA,gBAEhC7G,OAAA,CAACf,SAAS;UAAC2H,SAAS,EAAC;QAAc;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,YAExC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAET3G,OAAA;QAAK4G,SAAS,EAAC,aAAa;QAAAC,QAAA,gBAC1B7G,OAAA;UAAG4G,SAAS,EAAC,4BAA4B;UAAAC,QAAA,GAAC,OAAK,EAACrG,WAAW,EAAC,MAAI,EAACmB,UAAU;QAAA;UAAA6E,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChF3G,OAAA;UAAG4G,SAAS,EAAC,aAAa;UAAAC,QAAA,GAAAvG,OAAA,GAAEgB,KAAK,CAACd,WAAW,GAAG,CAAC,CAAC,cAAAF,OAAA,uBAAtBA,OAAA,CAAwBkB;QAAK;UAAAgF,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3D,CAAC,eAEN3G,OAAA,CAACjB,MAAM;QACLiI,OAAO,EAAExG,WAAW,KAAK,CAAC,GAAG8B,qBAAqB,GAAGN,UAAW;QAChEmF,QAAQ,EAAEjG,YAAa;QACvB0F,SAAS,EAAC,oDAAoD;QAAAC,QAAA,EAE7D3F,YAAY,GACX,eAAe,GACbV,WAAW,KAAK,CAAC,GACnB,qBAAqB,gBAErBR,OAAA,CAAAE,SAAA;UAAA2G,QAAA,GAAE,MAEA,eAAA7G,OAAA,CAACd,UAAU;YAAC0H,SAAS,EAAC;UAAc;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA,eACvC;MACH;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACK,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACvG,EAAA,CA7PuBD,SAAS;EAAA,QACdb,WAAW;AAAA;AAAA8H,EAAA,GADNjH,SAAS;AAAA,IAAAiH,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lorenzo\\\\Downloads\\\\physiopath-manual-project\\\\src\\\\components\\\\screening\\\\InteractiveBodyChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport { BodyFront, BodyBack } from './BodySVGs'; // We'll create this file next\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function InteractiveBodyChart({\n  view,\n  markedAreas,\n  currentSensation,\n  onAreaDrawn,\n  onAreaClick\n}) {\n  _s();\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [points, setPoints] = useState([]);\n  const svgRef = useRef(null);\n  const getMousePosition = e => {\n    const svg = svgRef.current;\n    if (!svg) return null;\n    const ctm = svg.getScreenCTM();\n    if (!ctm) return null;\n    const clientX = e.clientX || e.touches[0].clientX;\n    const clientY = e.clientY || e.touches[0].clientY;\n    return {\n      x: (clientX - ctm.e) / ctm.a,\n      y: (clientY - ctm.f) / ctm.d\n    };\n  };\n  const handleMouseDown = e => {\n    e.preventDefault();\n    const pos = getMousePosition(e);\n    if (!pos) return;\n    if (!isDrawing) {\n      setIsDrawing(true);\n      setPoints([pos]);\n    } else {\n      setPoints([...points, pos]);\n    }\n  };\n  const handleFinishDrawing = () => {\n    if (points.length < 3) {\n      // Not a valid shape, reset\n      setIsDrawing(false);\n      setPoints([]);\n      return;\n    }\n    const pathData = points.map((p, i) => (i === 0 ? 'M' : 'L') + `${p.x},${p.y}`).join(' ') + ' Z';\n    onAreaDrawn({\n      id: `area-${Date.now()}`,\n      pathData,\n      view,\n      sensationType: currentSensation.type,\n      intensity: currentSensation.intensity,\n      color: currentSensation.color\n    });\n    setIsDrawing(false);\n    setPoints([]);\n  };\n  const handleDoubleClick = e => {\n    e.preventDefault();\n    if (isDrawing) {\n      handleFinishDrawing();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    onDoubleClick: handleDoubleClick,\n    className: \"relative aspect-[1/2] max-w-sm mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      ref: svgRef,\n      viewBox: \"0 0 200 400\",\n      className: \"w-full h-full touch-none\",\n      onMouseDown: handleMouseDown,\n      \"aria-label\": `Interactive body chart, ${view} view. Click to mark areas.`,\n      role: \"img\",\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Body Chart\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), view === 'front' ? /*#__PURE__*/_jsxDEV(BodyFront, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(BodyBack, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 45\n      }, this), markedAreas.filter(area => area.view === view).map(area => /*#__PURE__*/_jsxDEV(\"path\", {\n        d: area.pathData,\n        fill: `${area.color}${Math.round(area.intensity / 10 * 200).toString(16).padStart(2, '0')}` // Color with intensity as opacity\n        ,\n        stroke: area.color,\n        strokeWidth: \"1\",\n        className: \"cursor-pointer transition-all hover:stroke-2\",\n        onClick: () => onAreaClick(area.id),\n        \"aria-label\": `Marked area for ${area.sensationType} with intensity ${area.intensity}`\n      }, area.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this)), isDrawing && points.length > 0 && /*#__PURE__*/_jsxDEV(\"g\", {\n        children: [/*#__PURE__*/_jsxDEV(\"polyline\", {\n          points: points.map(p => `${p.x},${p.y}`).join(' '),\n          fill: \"none\",\n          stroke: currentSensation.color,\n          strokeWidth: \"0.5\",\n          strokeDasharray: \"2 2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), points.map((p, i) => /*#__PURE__*/_jsxDEV(\"circle\", {\n          cx: p.x,\n          cy: p.y,\n          r: \"2\",\n          fill: currentSensation.color\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), isDrawing && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-2 left-2 bg-white/80 p-2 rounded-lg text-xs text-warm-gray-800 shadow-md\",\n      children: \"Double-click to complete shape.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n_s(InteractiveBodyChart, \"2zJb6vdnrMnRLkrmXla0NNIukAM=\");\n_c = InteractiveBodyChart;\nvar _c;\n$RefreshReg$(_c, \"InteractiveBodyChart\");","map":{"version":3,"names":["React","useState","useRef","BodyFront","BodyBack","jsxDEV","_jsxDEV","InteractiveBodyChart","view","markedAreas","currentSensation","onAreaDrawn","onAreaClick","_s","isDrawing","setIsDrawing","points","setPoints","svgRef","getMousePosition","e","svg","current","ctm","getScreenCTM","clientX","touches","clientY","x","a","y","f","d","handleMouseDown","preventDefault","pos","handleFinishDrawing","length","pathData","map","p","i","join","id","Date","now","sensationType","type","intensity","color","handleDoubleClick","onDoubleClick","className","children","ref","viewBox","onMouseDown","role","fileName","_jsxFileName","lineNumber","columnNumber","filter","area","fill","Math","round","toString","padStart","stroke","strokeWidth","onClick","strokeDasharray","cx","cy","r","_c","$RefreshReg$"],"sources":["C:/Users/Lorenzo/Downloads/physiopath-manual-project/src/components/screening/InteractiveBodyChart.jsx"],"sourcesContent":["import React, { useState, useRef } from 'react';\r\nimport { BodyFront, BodyBack } from './BodySVGs'; // We'll create this file next\r\n\r\nexport default function InteractiveBodyChart({ view, markedAreas, currentSensation, onAreaDrawn, onAreaClick }) {\r\n  const [isDrawing, setIsDrawing] = useState(false);\r\n  const [points, setPoints] = useState([]);\r\n  const svgRef = useRef(null);\r\n\r\n  const getMousePosition = (e) => {\r\n    const svg = svgRef.current;\r\n    if (!svg) return null;\r\n\r\n    const ctm = svg.getScreenCTM();\r\n    if (!ctm) return null;\r\n\r\n    const clientX = e.clientX || e.touches[0].clientX;\r\n    const clientY = e.clientY || e.touches[0].clientY;\r\n\r\n    return {\r\n      x: (clientX - ctm.e) / ctm.a,\r\n      y: (clientY - ctm.f) / ctm.d\r\n    };\r\n  };\r\n\r\n  const handleMouseDown = (e) => {\r\n    e.preventDefault();\r\n    const pos = getMousePosition(e);\r\n    if (!pos) return;\r\n\r\n    if (!isDrawing) {\r\n      setIsDrawing(true);\r\n      setPoints([pos]);\r\n    } else {\r\n      setPoints([...points, pos]);\r\n    }\r\n  };\r\n\r\n  const handleFinishDrawing = () => {\r\n    if (points.length < 3) {\r\n      // Not a valid shape, reset\r\n      setIsDrawing(false);\r\n      setPoints([]);\r\n      return;\r\n    }\r\n\r\n    const pathData = points.map((p, i) => (i === 0 ? 'M' : 'L') + `${p.x},${p.y}`).join(' ') + ' Z';\r\n    \r\n    onAreaDrawn({\r\n      id: `area-${Date.now()}`,\r\n      pathData,\r\n      view,\r\n      sensationType: currentSensation.type,\r\n      intensity: currentSensation.intensity,\r\n      color: currentSensation.color,\r\n    });\r\n\r\n    setIsDrawing(false);\r\n    setPoints([]);\r\n  };\r\n\r\n  const handleDoubleClick = (e) => {\r\n    e.preventDefault();\r\n    if (isDrawing) {\r\n      handleFinishDrawing();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div onDoubleClick={handleDoubleClick} className=\"relative aspect-[1/2] max-w-sm mx-auto\">\r\n      <svg\r\n        ref={svgRef}\r\n        viewBox=\"0 0 200 400\"\r\n        className=\"w-full h-full touch-none\"\r\n        onMouseDown={handleMouseDown}\r\n        aria-label={`Interactive body chart, ${view} view. Click to mark areas.`}\r\n        role=\"img\"\r\n      >\r\n        <title>Body Chart</title>\r\n        {/* Render the correct body view */}\r\n        {view === 'front' ? <BodyFront /> : <BodyBack />}\r\n\r\n        {/* Render previously marked areas */}\r\n        {markedAreas.filter(area => area.view === view).map((area) => (\r\n          <path\r\n            key={area.id}\r\n            d={area.pathData}\r\n            fill={`${area.color}${Math.round(area.intensity / 10 * 200).toString(16).padStart(2, '0')}`} // Color with intensity as opacity\r\n            stroke={area.color}\r\n            strokeWidth=\"1\"\r\n            className=\"cursor-pointer transition-all hover:stroke-2\"\r\n            onClick={() => onAreaClick(area.id)}\r\n            aria-label={`Marked area for ${area.sensationType} with intensity ${area.intensity}`}\r\n          />\r\n        ))}\r\n\r\n        {/* Render the polygon currently being drawn */}\r\n        {isDrawing && points.length > 0 && (\r\n          <g>\r\n            <polyline\r\n              points={points.map(p => `${p.x},${p.y}`).join(' ')}\r\n              fill=\"none\"\r\n              stroke={currentSensation.color}\r\n              strokeWidth=\"0.5\"\r\n              strokeDasharray=\"2 2\"\r\n            />\r\n            {points.map((p, i) => (\r\n              <circle key={i} cx={p.x} cy={p.y} r=\"2\" fill={currentSensation.color} />\r\n            ))}\r\n          </g>\r\n        )}\r\n      </svg>\r\n      {isDrawing && (\r\n         <div className=\"absolute top-2 left-2 bg-white/80 p-2 rounded-lg text-xs text-warm-gray-800 shadow-md\">\r\n           Double-click to complete shape.\r\n         </div>\r\n       )}\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}